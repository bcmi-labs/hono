pipeline:

  build:
    image: maven:3.5.2
    environment:
      - DEPLOY_IMAGE_TAG=0.5
      # Kubernetes namespace to deploy to
      - NS=premstg1
      # Kubernetes cluster to deploy to
      # Get a copy of arduino-kubeconfig
      # $ export KUBECONFIG=/path/to/arduino-kubeconfig
      # $ kubectl config use-context stg.k8s.iot.arduino.cc
      - CLUSTER=stg.k8s.iot.arduino.cc
    commands:
      - sed -i "s/\.hono/\.$${NS}/" $${CI_WORKSPACE}/demo-certs/ca_opts
      - cd $${CI_WORKSPACE}/demo-certs && ./create_certs.sh && cd $${CI_WORKSPACE}
      - sed -i "s/\.hono/\.$${NS}/" $${CI_WORKSPACE}/dispatchrouter/qpid/qdrouterd-with-broker.json
      - sed -i "s/\.hono/\.$${NS}/" $${CI_WORKSPACE}/example/src/main/config/grafana_datasource.json
      - mvn clean install -DskipTests -Ddeploy_image_tag=$${DEPLOY_IMAGE_TAG} -Ddocker.host=$${DOCKER_HOST} -Daws.cm.cert=$${CM_CERT} -Dclient.ns=$${NS} -Dcluster.domain=$${CLUSTER} -Pbuild-docker-image -lbuild.out
      - tail -100 build.out
      - grep -q "BUILD SUCCESS" build.out
    secrets: [ docker_host, cm_cert ]

  show-error:
    image: alpine
    when:
      status: [ failure ]
    commands:
      - tail -100 build.out

  ## temporary for debugging
  upload-artifacts:
    image: cgswong/aws:s3cmd
    commands:
      - s3cmd --access_key=$${AWS_ACCESS_KEY} --secret_key=$${AWS_SECRET_KEY} --recursive --force --delete-removed sync $${CI_WORKSPACE}/example/target s3://$${DRONE_BUCKET}/$${CI_REPO}/$${CI_COMMIT_BRANCH}/
    secrets: [ aws_access_key, aws_secret_key, drone_bucket ]

